#pragma once
//=====================================================================//
/*!	@file
	@brief	RX64M/RX71M/RX65x グループ・RTC 定義 @n
			※バイナリー・モードのみ定義
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2016, 2018 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/RX/blob/master/LICENSE
*/
//=====================================================================//
#include "common/io_utils.hpp"

/// CMPC モジュールが無いデバイスでエラーとする
#if defined(SIG_RX24T) || defined(SIG_RX66T)
#  error "rtc.hpp: This module does not exist"
#endif

namespace device {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief  RTC 定義基底クラス
		@param[in]	base	ベース・アドレス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <uint32_t base>
	struct rtc_t {

		//-----------------------------------------------------------------//
		/*!
			@brief  64Hz カウンタ（R64CNT）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x00> R64CNT;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 0（BCNT0）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x02> BCNT0;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 1（BCNT1）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x04> BCNT1;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 2（BCNT2）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x06> BCNT2;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 3（BCNT3）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x08> BCNT3;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 0 アラームレジスタ（BCNT0AR）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x10> BCNT0AR;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 1 アラームレジスタ（BCNT1AR）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x12> BCNT1AR;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 2 アラームレジスタ（BCNT2AR）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x14> BCNT2AR;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 3 アラームレジスタ（BCNT3AR）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x16> BCNT3AR;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 0 アラーム許可レジスタ（BCNT0AER）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x18> BCNT0AER;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 1 アラーム許可レジスタ（BCNT1AER）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x1A> BCNT1AER;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 2 アラーム許可レジスタ（BCNT2AER）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x1C> BCNT2AER;


		//-----------------------------------------------------------------//
		/*!
			@brief  バイナリカウンタ 3 アラーム許可レジスタ（BCNT3AER）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x1E> BCNT3AER;


		//-----------------------------------------------------------------//
		/*!
			@brief  RTC コントロールレジスタ 1（RCR1）
		*/
		//-----------------------------------------------------------------//
		struct rcr1_t : public rw8_t<base + 0x22> {
			typedef rw8_t<base + 0x22> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bit_rw_t <io_, bitpos::B0>	  AIE;
			bit_rw_t <io_, bitpos::B1>	  CIE;
			bit_rw_t <io_, bitpos::B2>	  PIE;
			bit_rw_t <io_, bitpos::B3>	  RTCOS;
			bits_rw_t<io_, bitpos::B4, 4> PES;
		};
		rcr1_t RCR1;


		//-----------------------------------------------------------------//
		/*!
			@brief  RTC コントロールレジスタ 2（RCR2）
		*/
		//-----------------------------------------------------------------//
		struct rcr2_t : public rw8_t<base + 0x24> {
			typedef rw8_t<base + 0x24> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bit_rw_t <io_, bitpos::B0>	  START;
			bit_rw_t <io_, bitpos::B1>	  RESET;
			bit_rw_t <io_, bitpos::B2>	  ADJ30;
			bit_rw_t <io_, bitpos::B3>	  RTCOE;
			bit_rw_t <io_, bitpos::B4>	  AADJE;
			bit_rw_t <io_, bitpos::B5>	  AADJP;
			bit_rw_t <io_, bitpos::B6>	  HR24;
			bit_rw_t <io_, bitpos::B7>	  CNTMD;
		};
		rcr2_t RCR2;


		//-----------------------------------------------------------------//
		/*!
			@brief  RTC コントロールレジスタ 3（RCR3）
		*/
		//-----------------------------------------------------------------//
		struct rcr3_t : public rw8_t<base + 0x26> {
			typedef rw8_t<base + 0x26> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bit_rw_t <io_, bitpos::B0>	  RTCEN;
			bits_rw_t<io_, bitpos::B1, 3> RTCDV;
		};
		rcr3_t RCR3;


		//-----------------------------------------------------------------//
		/*!
			@brief  RTC コントロールレジスタ 4（RCR4）
		*/
		//-----------------------------------------------------------------//
		struct rcr4_t : public rw8_t<base + 0x28> {
			typedef rw8_t<base + 0x28> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bit_rw_t <io_, bitpos::B0>	  RCKSEL;
		};
		rcr4_t RCR4;


		//-----------------------------------------------------------------//
		/*!
			@brief  周波数レジスタ H（RFRH）
		*/
		//-----------------------------------------------------------------//
		rw16_t<base + 0x2A> RFRH;


		//-----------------------------------------------------------------//
		/*!
			@brief  周波数レジスタ L（RFRL）
		*/
		//-----------------------------------------------------------------//
		rw16_t<base + 0x2C> RFRL;


		//-----------------------------------------------------------------//
		/*!
			@brief  時間誤差補正レジスタ（RADJ）
		*/
		//-----------------------------------------------------------------//
		struct radj_t : public rw8_t<base + 0x2E> {
			typedef rw8_t<base + 0x2E> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bits_rw_t<io_, bitpos::B0, 5> ADJ;
			bits_rw_t<io_, bitpos::B6, 2> PMADJ;
		};
		radj_t RADJ;


		//-----------------------------------------------------------------//
		/*!
			@brief  時間キャプチャ制御レジスタ y（RTCCRy）（y=0 ～ 2）
		*/
		//-----------------------------------------------------------------//
		template <uint32_t base_>
		struct rtccr_t : public rw8_t<base_> {
			typedef rw8_t<base_> io_;
			using io_::operator =;
			using io_::operator ();
			using io_::operator |=;
			using io_::operator &=;

			bits_rw_t<io_, bitpos::B0, 2> TCCT;
			bit_rw_t <io_, bitpos::B2>    TCST;
			bits_rw_t<io_, bitpos::B4, 2> TCNF;
			bit_rw_t <io_, bitpos::B7>    TCEN;
		};
		rtccr_t<base + 0x40> RTCCR0;
		rtccr_t<base + 0x42> RTCCR1;
		rtccr_t<base + 0x44> RTCCR2;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT0 キャプチャレジスタ 0（BCNT0CP0）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x52> BCNT0CP0;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT0 キャプチャレジスタ 1（BCNT0CP1）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x62> BCNT0CP1;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT0 キャプチャレジスタ 2（BCNT0CP2）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x72> BCNT0CP2;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT1 キャプチャレジスタ 0（BCNT1CP0）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x54> BCNT1CP0;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT1 キャプチャレジスタ 1（BCNT1CP1）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x64> BCNT1CP1;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT1 キャプチャレジスタ 2（BCNT1CP2）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x74> BCNT1CP2;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT2 キャプチャレジスタ 0（BCNT2CP0）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x56> BCNT2CP0;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT2 キャプチャレジスタ 1（BCNT2CP1）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x66> BCNT2CP1;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT2 キャプチャレジスタ 2（BCNT2CP2）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x76> BCNT2CP2;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT3 キャプチャレジスタ 0（BCNT3CP0）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x5A> BCNT3CP0;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT3 キャプチャレジスタ 1（BCNT3CP1）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x6A> BCNT3CP1;


		//-----------------------------------------------------------------//
		/*!
			@brief  BCNT3 キャプチャレジスタ 2（BCNT3CP2）
		*/
		//-----------------------------------------------------------------//
		rw8_t<base + 0x7A> BCNT3CP2;

	};
	static rtc_t<0x0008C400> RTC;
}
