#pragma once
//=========================================================================//
/*!	@file
	@brief	RX グループ・GPTW マネージャー
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2021 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/RX/blob/master/LICENSE
*/
//=========================================================================//
#include "common/renesas.hpp"

/// F_PCLKA タイマーのクロックに必要なので定義が無い場合エラーにします。
#ifndef F_PCLKA
#  error "gptw_mgr.hpp requires F_PCLKA to be defined"
#endif

namespace device {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief  GPTW マネージャークラス
		@param[in]	GPTWX	GPTW[0-9] ユニット
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	template <class GPTWX>
	class gptw_mgr {

		// ※必要なら、実装する
		void sleep_() { }

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief  コンストラクター
		*/
		//-----------------------------------------------------------------//
		gptw_mgr() noexcept
		{ }


		//-----------------------------------------------------------------//
		/*!
			@brief  PWM を開始
			@param[in]	limit	PWM カウンターのリミット
			@param[in]	ilvl	割り込みレベル（0 なら割り込み無し）
		*/
		//-----------------------------------------------------------------//
		bool start_pwm(uint16_t limit, uint8_t ilvl = 0) noexcept
		{
			power_mgr::turn(GPTWX::PERIPHERAL);




			return true;
		}


#if 0
		//-----------------------------------------------------------------//
		/*!
			@brief  周期レジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_r(uint16_t n) {
			GPT::GTPR = n;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＡレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_a(uint16_t n) { GPT::GTCCRA = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＢレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_b(uint16_t n) { GPT::GTCCRB = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＣレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_c(uint16_t n) { GPT::GTCCRC = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＤレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_d(uint16_t n) { GPT::GTCCRD = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＥレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_e(uint16_t n) { GPT::GTCCRE = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  コンペアキャプチャーＦレジスター設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_f(uint16_t n) { GPT::GTCCRF = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  A/D 変換開始要求タイミングレジスターＡ設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_ad_a(uint16_t n) { GPT::GTADTRA = n; }


		//-----------------------------------------------------------------//
		/*!
			@brief  A/D 変換開始要求タイミングレジスターＢ設定
			@param[in]	n	値
		*/
		//-----------------------------------------------------------------//
		void set_ad_b(uint16_t n) { GPT::GTADTRB = n; }
#endif
	};
}
