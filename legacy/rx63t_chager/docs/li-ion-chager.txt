


　　RX63T(R5F563T6EDFM、Flash:64K、RAM:8K)高性能 32ビットマイコンを使ったモバイルバッテリー


はじめに：
リチウムイオン電池はエネルギー密度が高く、軽くて高性能な二次電池です、しかし、扱うのが難しい側面もあります。
保護回路内臓で、安全性を追求したセルもありますが、保護回路を持たない「生」のセルでは、過充電や放電など、最悪発火したりして危険でもあります。
※最近は、製造方法や、材料の見直し、構造の最適化などで、品質が向上していて「安全」と言っている場合もありますが、古い製造技術で作られた製品も未だに流通しており、実際に発熱や発火事故も起こっています（原因は、リチウムイオンセル固有の場合と、充電回路や周辺回路の不備などが考えられますが、証拠が燃えている為、原因が不明な場合が多いようです）
、また電池と言うのは、エネルギーを蓄積している物体（非常に硬いバネを圧縮した状態）ですから、あまり、安全側で楽観的に考えるより、「危険」な物として扱う方が良いかと思います、逆に、「怖がり過ぎない」のも重要です、要は、良く特性や性質を理解して適切に扱うのが望ましいでしょう。


通常、リチウムイオン電池の充電には専用ICを使います、セルの数、充電電流、など、多くの組み合わせに応じて色々なコントローラーが発売されています。
代表的なのは、USB 電源（5V、500mA）からリチウムイオンセル１本を充電する事に特化したICでしょう。
マイクロチップ社、MCP73861/2 がその代表的な物でしょうか。
写真：
+------------------+
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
+------------------+
http://ww1.microchip.com/downloads/jp/DeviceDoc/21893C_JP.pdf

他に、柔軟な構成のリチウムイオンセルに対して充電を管理するICとして、リニアテクノロジー社が多くのICをラインナップしています。
http://www.linear-tech.co.jp/parametric/Battery_Charger_IC
充電時間を短くしたい場合、充電電流を多くする必要があり、効率（発熱など）の面から、リニア方式では無理がありスイッチング方式が多く使われます。
※リニアテクノロジー社は、同期整流方式の高効率スイッチングレギュレーターICのトップメーカーであり、その技術を利用した充電用ICを多く扱っています。

近年、スマートフォンや、モバイル機器は、消費電力が大きく出先で電池が切れる事も多く、その充電用に色々な容量のモバイルバッテリーが多く発売され人気です。
小型のモバイルバッテリーでは、USB用電源５Ｖ出力を一つ持っていて、充電には逆にUSBから行うタイプなどがあります。
http://www.sony.jp/battery/products/CP-ELSVP/
※SONY CP-ELSVP の例

大きな容量のモバイルバッテリーでは、USBからでは電力に制限がある為、充電に時間がかかります、そこで専用のACアダプターを利用する製品が多いようです。

今回、自作のエッセンスを注いだ大容量タイプのモバイルバッテリーを作りましたので紹介します。

写真：
+------------------+
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
+------------------+
ユニバーサル基板に組まれた本体

写真：liion_18650.JPG
+------------------+
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
|                  |
+------------------+
18650 サイズのセル（ピンク色は「SANYO製、3.6V 2200mA」青いセルは「UltraFire製、3.7V 2200mA」）

先の例でも挙げたようにモバイルバッテリーは、自分で作らなくても非常に多くが市販されており、価格もこなれてきています、しかしながら、売っている製品では、機能や評判など満足出来ない事もあり、「自作」では自分の欲しい機能を沢山詰め込めるので、作る楽しみと、実際に活用する事ができます、また、規模的にも難易度も自作に丁度良く、面白い題材だと思います。
翌々調べてみると、必要な容量のリチウムイオンセルを集めて、自分で作ると、大体市販価格の半分以下で作れるはずでです。
今回、秋葉原やネットで入手出来る部品を使って、モバイルバッテリーを製作してみました。
リチウムイオン電池のマネージメントは、色々な要求に応えると複雑なので、マイコンの助けは必要です、そこで、充電用専用ICを使わずになるべく、マイコンの機能を活用して、ソフトウェアーの工夫で、必要な機能を実現してみました。
周辺の部品もなるべく入手しやすい汎用的で安価な部品を選んでありますので、作りやすいと思います。

モバイルバッテリーのキモは、充電電流を制御したり、USB用5V電源を出力する為の降圧型DC/DCコンバーターにあります。
この部分だけ専用ICを使う事もできますが、ルネサス製のRX63Tには、100MHzで駆動できるPWM回路があり、
この高速PWMと12ビットA/Dコンバーターを使えば、実用的なデジタル降圧型DC/DCコンバーターを実現出来るのでは無いかと思ったのが、キッカケでもあります。
又、RXマイコンの開発環境では、オープンソースのgccが使え、デバイス自体も入手性が良く、安価です。

-----------------------------------------------------------------------------------------------

設計方針：
・充電には、ノートPCなどの16V～19V系のACアダプターを流用します、2A程度で充電する場合30W程度の容量が必要です。（今回は19V、70WのACアダプターを使いました）
・18650型リチウムイオンセル（保護回路無しタイプ）を複数利用する。
・同期整流式降圧コンバーターを使い効率を最適化します。（発熱が少なく、電力を有効利用できます）
・USB用の5V出力、最大2A程度を想定します。（USBの充電出力は1A以上を出せる事が望ましいようです）
・詳細な充電状態、出力モニター表示を行う小型白黒液晶を付けました、必要なければ付けなくてもOKです。（今回はOLED128x64ピクセル、SPI接続）
・なるべく外付け部品を少なく簡素化する事で作りやすく、コストのかからない構成にしています。
・充電制御は、ソフトウェアーで行えるので、セルの本数など柔軟な構成を自分で組み替える事が出来ます。
・ラジコン用のリチウムポリマーセルなども充電できると思います（最大3セルまで）
・ソフトウェアー制御なので、定電流出力で、パワーLEDのドライブなども可能です。
・将来的に太陽電池からの充電も可能とする構成にしておきます。（電源変動に強い構成）
・USB出力では、電流モニターや、電流制限なども設ける。
・リチウムイオンセルを長持ちさせるための機能を設ける。（保管用充電パターンなど）
・C++による実装、gccによるコンパイルと、メーカー製ヘッダーに依存しない実装。

※ノート用ACアダプターのプラグは、大抵特殊な形状なので、流用するには工夫が必要です、一つの方法として、ケーブルを切断して間に中継コネクターを入れる事です、もちろんサポートが無くなりますが、ACアダプターが故障する事は少ないと思いますし、ノートPC用電源と充電用を共有できて便利だと思います。

※RX63Tを選んば理由として、日本製マイコンである事（筆者は、以前から、H8、SHシリーズなど旧日立製、ルネサス製マイコンを多く使って来ました、日本製のマイコンに特段の愛着があります）、PWMが最大100MHzで動作する事、価格が安く、入手性も良い事、gccが使える事などを上げる事が出来ます。
特にPWMの周波数は重要で、96MHzで駆動(12MHzの8倍）して、分解能を９ビット確保しても、186KHz程度のPWM周波数を維持できる為、DC/DCコンバーター（スイッチング降圧電源）のLC回路を小型化出来ます。
※欲を言うと、もう少し高い周波数が欲しいところですが、186KHzならまぁまぁだと思います。
※より高い周波数を擬似的に得る事が出来るRX62Gは、RX63Tより値段が高かった為、今回はスルーしましたが、実験してみたいデバイスです。

※ソフトウェアーは、全てC++で実装しています、デバイス依存のヘッダーファイル（ルネサス社提供の物）も独自に実装しています、gccを使ってコンパイルしていますが、ソースコードの実装はコンパイラーに依存しないように配慮しています。（他の環境で試していませんが、C++03対応なら大丈夫なハズです）


-----------------------------------------------------------------------------------------------

構成：

(0) 全体ブロック図

  +-------------+
  +         A/D +-------< USB 電流検出
  +         A/D +-------< USB 電圧検出
  +             +
  +  RX63T  A/D +-------< セル電流検出
  +         A/D +-------< セル電圧検出１
  +             +-------< セル電圧検出２
  +  PWM PWM    +-------< セル電圧検出３
  +---+---+-----+
      |   |
      |   |  +--------------------------+
      |   |  +                          +----> USB 電源出力
      |   +--+  DC/DC 降圧コンバーター  +
      |      +                          +----> USB 電流出力
      |      +--------------------------+
      |
      |   +--------------------------+
      |   +                          +----> セル電流検出
      +---+  DC/DC 降圧コンバーター  +----> 充電＋
          +                          +----> 充電－
          +--------------------------+


           > 充電＋
              |
              +--------------------->セル電圧検出１
              |
  +--------------------------+
  |                          |
  |  リチウムイオン電池セル  |
  |                          |
  +--------------------------+
              |
              +--------------------->セル電圧検出２
              | 
  +--------------------------+
  |                          |
  |  リチウムイオン電池セル  |
  |                          |
  +--------------------------+
              |
              +--------------------->セル電圧検出３
              | 
  +--------------------------+
  |                          |
  |  リチウムイオン電池セル  |
  |                          |
  +--------------------------+
              |
           > 充電－


(1) 制御マイコン
RX63T(R5F563T6EDFM、RAM: 8K、Flash: 64K、EEPROM: 8K)
※マルツパーツ館から購入可能（555円）

RX63Tは、RX600シリーズ中でラインアップされているマイコンで、色々細かく、改善されています、以前にインターフェース誌の付録として紹介された事があるRX62Nの後継で、内部の構成を改良してあります。

その為、RX62N用に書かれたデバイス依存のソースは、そのままでは使えない場合もあり、改修が必要です、もし、以前のソースコードを再利用する場合は、ハードウェアーマニュアルを比べて、違いを良く検討する必要があります。
※最初にRX63Tを動作させる時、仕様の違いで勘違いなどして、多少苦労した経験があります。
・I/Oデバイス関係は、安全機能があり、保護機能（レジスタライトプロテクション機能）を解除しないとアクセスが無効となってしまう構造です。
※これは、暴走などで、プログラムが不正に動いた場合でも、安全性を確保する為でしょう、開発段階では多少不便ですが、馴れれば問題ないでしょう。
・PLL回路が大幅に機能強化されていて、多少複雑な構成になっています。
通常、USBを使いたい場合、12MHzの整数倍などをシステムクロックとして選ぶ必要がありますが、柔軟なPLL回路があるので、かなり柔軟にシステムクロックを選択する事が出来るようになりました。
※筆者の場合、12MHzのクリスタルが余分にあったので、12MHzを基準クロックとして採用しています。
・gcc を活用できる。
※gcc 4.7.3 を使っています。
※gcc 環境は自分でコンパイルして構築する事が出来るので、Linux、OS-X、Windowsなど開発環境を選びません。
※Windows mingw 用 RX用gccツールチェインは、以下からダウンロードする事が出来ます。
URL:
インターフェース詩2014年2月号に「プロはソースから！My クロス・コンパイル環境の構築」と題した、gcc ツールチェーンのビルド方法が詳しく書かれていますので参考にして下さい。
※このRXマイコンは、USBインターフェースを内臓していない為、Flashの書き込みは、シリアル通信で行います、その為、通信用シリアル入出力を用意する必要があります。
※ルネサス社提供のFlashメモリー書き込みツールでも、FTDIのFT232などのUSBシリアル変換デバイスを認識しますので、簡単に接続が出来ます。


(2) 同期整流式降圧コンバーター
最近、同期整流式降圧コンバーターを構成するのに便利で安価なICが多数発売されています。
今回採用したのはIR社（インターナショナルレクチファイヤー社）の「IR2104」です。（2個170円）
入手したICは、MSOPパッケージだったので、変換基板に乗せましたが、MOSFETをドライブする結線は、念のため、変換基板経由（変換基板のラインは細くて不満）にしないで、ICのピンから直接接続してあります。
写真：

パワーMOSFETも今回の構成に十分な電流を流せてON 抵抗が小さく高速動作が可能で入手性が良いローム社の「RSS100N03」を採用しました。
ローム RSS100N03: 10個300円
VDSS     30V
VGSS     20V
ID     +-10A
Rds       9.5m (VGS 10V)
Rds      12.5m (VGS 4V)
Ciss   1070pF   入力容量

フェアチャイルド FDS6612A:（こちらでも問題無いでしょう）10個200円
VDSS     30V
VGSS     20V
ID      +-8.4A
Rds       19m (VGS 10V)
Rds       24m (VGS 4.5V)
Ciss    560pF   入力容量


(3) 市販されているリチウムイオンセルを利用
安価な18650サイズのリチウムイオンセルを複数組み合わせて、自分の欲しい容量を作成出来ます。
最も高性能で品質が高いと思われるのはサンヨー（現在はパナソニック）製のセル（3.6V、2250ｍA/h）で、それでも1本600円程度で入手出来ます。
※6本使う事で、13500mA／3.6Vのモバイルバッテリーを作成出来ます。
※3本のセルを直列にするので、一応、バランス充電（各セルの電圧を個別に測定出来る）を行えるような構成にします。
※バランス充電は、ラジコンのリチウムポリマー電池の充電にも対応出来ます。


（４）USB電源出力
モバイルバッテリーの目的としてUSB用電源出力を使って携帯や、スマートフォンなどを充電する事に使うので、5V出力を用意します。
出力電流はとりあえず、2Aまでをサポートします。
※これは、パワーMOSFETは10Aまで流せるので、インダクターの飽和電流によって制限されます。
電流モニターを付けて、出力電流をモニターでき、設定電流を超えた場合にシャットダウンする機能など持たせる事が出来ます。
この降圧コンバーターの構成は、充電回路とほぼ同じになっています、充電用は、逆流防止のダイオードが入っているだけです。

（５）その他
降圧コンバーターは、電流を検出できるような回路を持たせているので、パワーLEDなどを定電流制御するにも都合が良いです、パワーLED点灯用にも流用出来るようにしておきます。（これはソフトウェアーの対応だけで実現可能です）
大きな光量を長時間使える電灯としても利用出来ます。
内部モニターとして小型の液晶画面を追加します、今回は128x64のドットマトリックスOLEDを使った、SPI制御タイプを使用しました。
リチウムイオン電池は、満充電で長時間放置すると消耗する性質があるので、80%充電など、「いたわり」モードを設けます。
ソフトウェアーによって安全処置、操作性、利便性を追求します。
C++による解りやすく、柔軟なソフトウェアーをめざします。
太陽電池セルを使って充電出来るような構成も視野に入れます。
他、専用基板の製作など。


-----------------------------------------------------------------------------------------------

ハードウェアー：

・マイクロコントローラー
RX63T のクリスタルは12MHzを使い、内部のPLL設定で、96MHzで動作させます。
96MHｚ駆動のPWMでは、分解能を９ビット程度と考えると、186.5KHｚのPWM周波数となる（分解能を多くしたいけど、周期が低くなる、逆にもっと周期を速くしたいが、分解能が荒すぎると考えて、9ビットとしました）インダクターは、電源電圧、ピーク電流、リップル比などから、68uHとしました。
A/Dコンバーターの基準電圧は2.5Vとし、電圧リファレンス「LM336z-2.5」を使いました。
A/Dコンバーターの分解能や、PWMの分解能は、最終的なリップルと大きな関係があると思います、9ビットのPWMと12ビットのA/Dの組み合わせなら、許容範囲の性能を確保できると思います。

・同期整流ドライバー
IR社は、NチャネルMOSFETをドライブするのに都合が良い汎用ICを数多くラインアップしています、その中で、IR2104は、数アンペア程度のパワーMOSFETをドライブするのに適した物です。
上段のドライブを行うのにboost回路を備えます。
boost回路では、FETがOFFのタイミングで、boostコンデンサに充電する事で、ON時の電圧を蓄えている為、PWMのdutyを100％（常にON）に出来ないのですが、上段のスイッチ素子として、NチャンネルのMOSFETを使う事が出来便利な回路です。
boost用のダイオードは、高速で、VFが低く、リーク電流が少ないタイプが望ましいと思えます、全ての要件を満足する製品は意外と少ないのですが、１Aクラスでは、それなり選択枠はあります。
海外の半導体メーカーの場合、サンプル回路などで使っている部品は、日本国内ではあまり馴染みの無い品名の部品だったりして仕様を満たす部品を選択するのに気を使います。
パワーMOSFETの選択ではON抵抗が小さく、入力容量が小さい高速タイプを選択する必要があります、（本来は、他にも検討する仕様は多くありますが、最初の目安はその二つだと思われます）最近は、非常に多くのメーカーがそれらの条件に適した製品を多くリリースしています、ローム社のRSS100N03もその一つで、定格30V10A、で高速な動作に適しているようです、10個で300円で市販されていました、他にフェアチルドの「FDS6612A」も良い選択に思います、このMOSFETは、Cissが、ローム社の物の半分なのでより高速動作が期待できますが、ON抵抗はローム社より多く、スイッチング周波数が186KHzとあまり高速では無い為、ローム社を使いました。
※実際には両方で実験して比べてみないと、判らないです。

ショットキーダイオード「D1」の追加、このダイオードは、上段と下段のMOSFETがデッドタイム中に導通し、下段のボディ・ダイオードがデッドタイム中にターンオンして電荷を蓄積するのを防止します。
この部品の追加によって、効率がほんの少し改善するはずです。
※ピーク電流の1/3～1/4程度の電流容量のダイオードで十分です。
※このダイオードの効果も実際に計測してみないと判らないのですが、一応入れてあります。


MOSFETのドライブ用と、オペアンプの電源用に16Vのレギュレーターを入れますが、リチウムイオン電池で駆動する場合は、スルーする必要があります。
リチウムイオンセルが3本直列だと、16Vを超えない（4本だと超えてしまう）と思うので、電源が最大16VのレールtoレールCMOSオペアンプを採用しました。（NJU7034）
マイコン用3.3V電源は、最大でも数十ミリアンペア程度しか流れないと思いますが、リニアレギュレーターで、19Vから落とすのでは多少厳しいと思うので効率優先でDC/DCモジュールを使っています、最近このようなスイッチングモードのモジュールが安価に入手出来ます。

ハイサイド側の電流検出用回路は、レールｔｏレールオペアンプの参考回路では良くあるもので、専用ICと違って、微小電流の検出はあまり得意とは言えないのですが、今回の目的には十分と思われます。

大きな電流を扱うスイッチング回路では、回路に現れない部分として、電源ラインのインピーダンスなどの考察があります、ユニバーサル基板で試作する場合には、電源のスイッチングノイズを極力減らす工夫が必要だと思います、この辺りは、経験的な部分も多いのですが、スイッチングレギュレーター専用ICのデータシートなどに、基板のパターンや部品配置などの情報を載せている事が多く、これらの手法やアプリケーションノートを参考にする事が出来るので、参照にしたら良いと思います。

・放電器
リチウムイオンの充電器を製作する過程で、充電を繰り返し行いテストするので、放電器も必要となります、そこで、定電流で放電をしながら、端子電圧を監視して、停止電圧で放電を停止する回路が別途必要となったので、その回路も追加しています。

・温度の測定
充電や放電を行う際、周囲の温度は重要です、極端に低かったり、熱かった場合は、何らかの対応をする必要があると思われますので、周囲の温度を測定するデバイスを載せる事にします。


-----------------------------------------------------------------------------------------------

ソフトウェアー：
最近は、筆者は、特別な理由が無い限り、C++で実装を行います、理由は、C言語より優れている点が格段に多く、より少ない時間で目的を達成できると思うからです。
また、メーカーがサンプルなどで提供しているI/Oの機能を網羅したヘッダーを一切使う事無く、独自のC++用定義を新たに実装して使っています、これには色々な理由があり、色々な意見もあると思いますが、利便性や実装のしやすさ、ソースコードの見やすさ、安全性を追求した結果です。

今回のソフトウェアーでは割り込みや、RX63Tの持っているリソースを利用してシングルタスクで動作しています。
電圧、電流の制御は、高速な応答が必要なので、タイマー起動の割り込み内で行うようにして、表示系をメイン処理で行っています。

(1) 文字列の出力
組み込みでは、C++で実装する場合に注意する点があります、libstdc++（標準のC++ライブラリー）はかなり巨大で、小さなメモリーには入らない場合があります。
最初に問題になるのは、iostream 関連です、文字列を出力する場合、C++ではprintfを使いません（コラム２を参照）、通常iostreamを使って文字列の出力を行います、しかしながらiostreamは高機能で巨大です、多くのRAMとROMを消費してしまいます、そこで、小規模な文字の出力を行う為、独自実装のiostreamに代わる物などを用意しました、小規模ながら、16進表示や2進表示、小数点型整数の表示を行えるように特化した物です。

    printf("A/D: %d\n", adc);   // NG! 不整合が起こると安全で無い！、C++ らしく無い！

    std::cout << "A/D: " << static_cast<int>(adc) << std::endl;    // OK! だが、iostream を使うとメモリー消費が大きい！

そこで、printf 的に使えるC++流のクラスを定義。

    utils::format("A/D: %d\n") % static_cast<int>(adc);   // utils::format クラスを使った安全な文字出力

※この「utils::format」クラスは、boost::format （コラム３を参照）の仕様を参考にしています、boost::formatを使えれば良いのですが、iostreamに依存していて、やはりメモリーを食う為、独自仕様の物を実装しています、使い方はソースコードを観て下さい。


(2) デジタルDC/DCコンバーター制御ソフト

今回は、色々試して、安定性と調整重視で、比例制御に近い方法で電圧や電流を制御しています、負荷が急激に変動した場合の応答が悪いのですが、リチウム電池の充電や、USBの電源、LEDの電流源には十分だと思います。
また、A/D変換の分解能、PWMの分解能、コイルのインダクタンスなどから、出力は常に変動していますが、20mV程度ですので、通常問題無いと思います。

chager.hpp から
※低電圧制御
	int32_t const_voltage() {
		if(vol_ref_ < out_) --cpv_;
		else if(vol_ref_ > out_) ++cpv_;
		int32_t cmpv = cpv_ / gain_;
		if(cmpv < low_limit_) cmpv = low_limit_;
		else if(cmpv > high_limit_) cmpv = high_limit_;
		return cmpv;
	}

※定電流制御（最大電圧リミット制御付き）
	int32_t const_current() {
		if(vol_lim_ < out_) {
			--cpv_;
		} else {
			if(cur_ref_ < cur_) --cpv_;
			else if(cur_ref_ > cur_) ++cpv_;
		}
		int32_t cmpv = cpv_ / gain_;
		if(cmpv < low_limit_) cmpv = low_limit_;
		else if(cmpv > high_limit_) cmpv = high_limit_;
		return cmpv;
	}


(3) OLED ドットマトリックス液晶の制御

OLED のドットマトリックス液晶では、１秒に６０回程、画面を更新する事で、より柔軟な画面制御を行っています。
この場合、画面のドットイメージを、メインメモリーにも持っていますが、表示デバイスが代わっても、初期化と転送する部分だけ、デバイスに合わせて変更すれば良いので、簡潔で変更が容易です。
表示は、一旦画面を全てクリアして、毎回行っていますが、96MHzで動くRXマイコンには、軽い作業で、毎回定期的に行っている為、アニメーションなどを制御しやすく、制御しやすい方法です。


(4) C++ 流、シリアル出力クラス

今回、I/O デバイス定義を全て実装していますが、これの利点を判り易く説明する点として、シリアル出力のテンプレート関数があります。
64ピンのRX63Tでは、シリアルは２チャネルあります、このテンプレートを使うと、簡単に使う事が出来るように工夫してあります。

    device::sci_io<device::SCI1, 256, 256> sci1_;

↑この場合、SCI1 チャネルをシリアル入出力として使う宣言をしています。
「device::SCI1」がシリアルデバイスの C++ による定義です、sci.hpp を参照の事。
※チャネル０で行うには、SCI0とすれば良く、０～３まで定義されています。
256, 256 は、受信と送信のバッファ容量です。

初期化では、以下のように割り込みレベル設定をしてから、起動させます。

    int int_level = 2;
    sci1_.initialize(int_level);  // 割り込みレベルの設定
    sci1_.start(19200);           // ボーレートの設定

文字を出力するには、以下のようにします。

    sci1_.putch('a');           // 文字の出力
    sci1_.puts("Hello !!!\n");  // 文字列の出力

詳しくは、sci_io.hpp を参照下さい。


-----------------------------------------------------------------------------------------------

リチウムイオン電池の充電アルゴリズム：

一般的な手法では、規定電圧までは定電流で充電を行い、規定電圧になったら、定電圧でさらに充電を行い、充電電流が減少してきたら、充電を打ち切る方法です。
これは、ニッカドやニッケル水素電池の充電手法よりむしろ簡単で安全と言えます。
※ニッカド電池や、ニッケル水素電池の場合は、定電流で充電していると満充電状態に伴い、充電電圧が微妙に変化します、それを捉えて充電を終了しますが、この変化が微妙なので、正確に捉えるには工夫が必要で難しいと思います。
充電終始を捉えるのに時間がかかると、その分過充電となり電池を痛めてしまうと言えます。
※ニッケル水素電池では、過充電に対してニッカド電池より耐性があるようです。
※過充電では、通常発熱します。

規定電圧は、4.1V（3.6Vセル）か、4.2V(3.7Vセル）を推奨しているよう（電池のプロファイルにより違う）です、多少低く設定した方が、電池のサイクル寿命が延びるので、ギリギリまで充電しない方が良いようです、なので、ソフトウェアーで、選択出来るようにしたいと思います（たとえば、3.9V:保管用、4.0V（3.6Vセル）、4.1V（3.7Vセル）:寿命優先、4.1V(3.6Vセル）、4.2V（3.7Vセル）:容量優先）。
※「保管用」はバッテリーを長時間使わない場合に、寿命を延ばす保管用で、定電流で、3.9Vになった時点で充電を終了します。
※この電圧は、要検討。


・電池ホルダーの接触抵抗の回避
定電流による充電中に、セルの電圧をモニターしますが、その場合に、電池ホルダーの接触抵抗による電圧降下をキャンセルする手法として、一旦、充電電流をカットして、セルの電圧を測定する事で、接触抵抗による電圧効果をほぼ無効に出来ます、ただ、定電流による充電が間欠的に行われるのが問題になる場合もあるので、多少検討が必要です。
また、充電中の電圧が、高い場合に、接触抵抗なのか、又はその他の問題なのかを判断するのが難しいので、これは、パラメーターの調整が必要でもあり、接触抵抗がほぼ無い状態がベストです。
流す電流が少なければ問題は少ないでしょう。

・測定電圧の正しい検出
定電流の充電では、端子電圧が割りと長いインターバルで変動します、この変動は、PWMの分解能、A/D変換の分解能、コンバーターの回路時定数、スイッチングノイズなどからなります、そこで、この変動を除去しなければなりません、このような場合、どの電圧を候補にするか？、単純に平均を取れば良いと思うかもしれませんが、それでは満点ではありません、ベスト思える方法は統計的に候補を選択する方法です、たとえば、１秒の間、サンプルを繰り返し、それをソートして、一番回数が多い電圧を候補とする手法です、これなら、突発的に出た「小さい値」や「大きい値」を除去でき、かなり実測値に近い値となると思います。


放電特性の考察：
リチウムイオン電池の場合、放電停止は2.5V程度のようですが、この領域では、少しの電流しか取り出せない上体なので、実用的な放電停止電圧は3.0V～3.2V程度のようです。
※携帯電話では3.2Vを採用しているようです。
モバイルバッテリーの場合、内部マイコンの電源を供給する必要がある為、電池容量0%でも、マイコンを動作させるのに十分な電力を確保する必要性がある事から、少し余裕も見て、今回は、3.2Vを終始電圧として採用します。
その状態で電源を入れても、「Low Battery!」表示などを行い、電源をシャットダウンするようにしなければなりません。


-----------------------------------------------------------------------------------------------

RX63T へのプログラミング：
・RX63T のフラッシュROMへのプログラム書き込みは、「Renesas Flash Programmer」を使って行います。
・プログラムのダウンロード、インストール手順
※ダイアログのキャプチャーと手順など

・RX63T デバイスの設定（デバイス種類、クロック周波数など）
※ダイアログのキャプチャーと手順など

・RX63Tは、モードピンの状態により、プログラミングモード、及び、シングルチップモードを切り替える事が出来ます。
・RX63Tのシリアル通信は、チャネル１を使います。


-----------------------------------------------------------------------------------------------

電池ホルダー：

扱う電流が、数百mA 程度なら、問題無いと思いますが、数アンペアになる場合、接触抵抗の問題で、電池ホルダーは大変重要な問題が発生します。
接触抵抗が大きいと、端子間の電圧が不安定となり、充電の状態を判断する基準がずれてしまいます。
一番良い方法は、スポット溶接などで、接続端子を溶接するか、ハンダ付けする事なのですが、スポット溶接には専用の溶接機が必要だし、ハンダ付けする場合でも大きな容量のコテを使わないと、熱容量が大きい電池ケースに直接ハンダを乗せる事が難しいです、それと、熱を加えるのに抵抗があります、最初から端子がスポット溶接された電池を入手する事も考えられますが、あまり流通しておらず、あったとしてもかなり割高になってしまうようです。
※まだ使える中古（新古）のノートPCのバッテリーを分解してセルを取り出す事でも良いかもしれません。

そこで、とりあえず、電池ホルダーを自作する事を考えます、接触抵抗を減らして、大きな電流を取り出せるようにしなければならないので、多少工夫が必要です。

いくつか試した中で、接触点を複数設けて、強めのテンションをかけるのが良さそうです、そこで複数のピンとスプリングを使った電池ボックスを試作してみました。



---------------------------------------------------------------------------------------

コラム：
「C++に関する間違った認識」
C++を組み込みマイコンで積極的に使う例は、日本では少ないように思います、それには色々な理由が考えられますが、最大の要因は、理解するのが難しいからだと思います。
C++ではCのプログラムもほぼそのままコンパイル出来てしまう為、C++に馴染みの少ないC言語のプログラマーは、大体分かったつもりになっている事が多いと思います（自分もそうだった）、また便利なCとしてC++の機能を少し使う事でC++を理解したような感覚になる事も拍車をかけていると思います。
しかし、「C++はC言語とは全く違う言語である」この点に立たなければ、到底理解する事は出来ないのでは無いかとさえ思います。
また、web上では、正確な情報が少なく、間違った情報が散見され、正しい理解を阻害しており、学ぶ事が難しい言語であるとも思います。
C言語で数万行のプログラムを書けるような熟練者でも間違った理解をしている事が少なく無いと思います。

以下に示したのは、間違って伝えられている重要項目です。
・C++はC言語より動作が遅い。
全くの間違いで、「適切に実装された」コードは、最適化により、通常、C言語より高速に動作します。
・C++はリソースを多く消費する。
これも間違いで、同じ仕様を満足する実装では、CでもC++でもリソースの消費量は殆ど変わらないでしょう。

「適切に実装」されたが重要で、間違った不適切な実装では、全く逆の結論になる事もあります。

一般に、「Cで実現出来るのだからあえてC++で実装する必要性を感じない」と言う意見も多いのですが、コンピューターの言語は、より高性能で、高機能、安全な物に進化していくのは当然のなりゆきで、止める事は出来ません、高機能な言語は、人間の為の物であると思えます。

よく考えてもらいたい事項があります、今回のような100MHzで動作する、高性能な３２ビットマイクロプロセッサー上で、より高性能で、高機能なC++が使えるのに、わざわざCでプログラムする必要性はあるでしょうか？
C++をある程度習得するとC言語より格段に正確で柔軟なコードを短い時間で実装出来るようになります。
問題だと思う事は、「C++の正しい習得には時間や労力がかかる点」、また、メーカーの提供するサンプルなどもまだまだCが中心で、整った形態で品質の高いC++のサンプルが少ない事。（そもそも、品質が高いサンプルコードは少ない）
今回C++を使って組み込みマイコン用の実装を提供しているので、C++に興味ある人は是非、このようなアプローチを参考にしてもらいたいと願います。


コラム２：
「printf の功罪」
printf は、非常に柔軟性があり便利な関数ですが、可変長引数を伴った仕様は、安全ではありません。
多くの組み込み機器メーカーや、ゲームの実装では、printfを最終的な製品で使う事を禁止しています。
人間はどんなに注意してもミスをするもので、printfのフォーマット文字列と引数の不整合は、コンパイラで完全に誤りを検出する事が不可能で、もし間違いが起こると、致命的な問題を引き起こす可能性があります。
困った事に、動いているかのように見えて、実際は仕様に無い微妙な挙動をしている場合などあり、発見しにくい場合が多く、運よく問題が露見する事が無い場合もありますが、一歩間違うとシステムが停止する事になります。
やはり、最善の方法は使わない事で、多くのメーカーでは、リリース版で、defineを使ってprintf関係の関数を全て無効にしています。


コラム３：
「boostライブラリー」
C++では、オープンソースなライブラリーが沢山あります、「boost」もその一つで、誰でも自由に使う事ができ、高機能で使いやすい色々な機能が揃っていて、ライセンス表示なども一切必要無いと言う画期的な資産です。
http://boostjp.github.io/
ただ、残念な事に、いくつかの企業では（そのような場合を何度か経験しました）、無理解の為、利用を禁止している場合があります。


----------------------------------------------------------------------------------------

最後に：

今回、RX63Tを使ってモバイルバッテリーを作りましたが、RX63Tにはまだまだリソースが残っています。
今後、このモバイルバッテリーをプラットホームにして色々な物を追加しようと考えています。

・「RTC」折角、OLED液晶を付けたので、時計は必須でしょうか。
・bluetooth 音楽再生デバイス
※大容量のバッテリーを生かして、アンプとスピーカー程度を追加すれば、出来そうなので簡単ですね。
※スピーカーは取り外しを可能な構造にすれば、モバイルバッテリーとして使う場合と共有できそうです。
・音楽プレイヤー
※昔のラジカセのようなイメージで、SDカードの読み出しと、MP3デコーダー、アンプ、スピーカーを追加すれば出来そうです。

以上のように、簡単に思いつく例題を挙げてみましたが、応用範囲は意外と広いです。

